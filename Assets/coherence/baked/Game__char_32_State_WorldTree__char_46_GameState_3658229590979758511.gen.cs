// Copyright (c) coherence ApS.
// For all coherence generated code, the coherence SDK license terms apply. See the license file in the coherence Package root folder for more information.

// <auto-generated>
// Generated file. DO NOT EDIT!
// </auto-generated>
namespace Coherence.Generated
{
	using Coherence.ProtocolDef;
	using Coherence.Serializer;
	using Coherence.SimulationFrame;
	using Coherence.Entity;
	using Coherence.Utils;
	using Coherence.Brook;
	using Coherence.Toolkit;
	using UnityEngine;

	public struct Game__char_32_State_WorldTree__char_46_GameState_3658229590979758511 : ICoherenceComponentData
	{
		public int playerCount;
		public int _internalFaction;

		public override string ToString()
		{
			return $"Game__char_32_State_WorldTree__char_46_GameState_3658229590979758511(playerCount: {playerCount}, _internalFaction: {_internalFaction})";
		}

		public uint GetComponentType() => Definition.InternalGame__char_32_State_WorldTree__char_46_GameState_3658229590979758511;

		public const int order = 0;

		public int GetComponentOrder() => order;

		public AbsoluteSimulationFrame Frame;
	
		private static readonly int _playerCount_Min = -2147483648;
		private static readonly int _playerCount_Max = 2147483647;
		private static readonly int __internalFaction_Min = -2147483648;
		private static readonly int __internalFaction_Max = 2147483647;

		public void SetSimulationFrame(AbsoluteSimulationFrame frame)
		{
			Frame = frame;
		}

		public AbsoluteSimulationFrame GetSimulationFrame() => Frame;

		public ICoherenceComponentData MergeWith(ICoherenceComponentData data, uint mask)
		{
			var other = (Game__char_32_State_WorldTree__char_46_GameState_3658229590979758511)data;
			if ((mask & 0x01) != 0)
			{
				Frame = other.Frame;
				playerCount = other.playerCount;
			}
			mask >>= 1;
			if ((mask & 0x01) != 0)
			{
				Frame = other.Frame;
				_internalFaction = other._internalFaction;
			}
			mask >>= 1;
			return this;
		}

		public static void Serialize(Game__char_32_State_WorldTree__char_46_GameState_3658229590979758511 data, uint mask, IOutProtocolBitStream bitStream)
		{
			if (bitStream.WriteMask((mask & 0x01) != 0))
			{
				Coherence.Utils.Bounds.Check(data.playerCount, _playerCount_Min, _playerCount_Max, "Game__char_32_State_WorldTree__char_46_GameState_3658229590979758511.playerCount");
				data.playerCount = Coherence.Utils.Bounds.Clamp(data.playerCount, _playerCount_Min, _playerCount_Max);
				bitStream.WriteIntegerRange(data.playerCount, 32, -2147483648);
			}
			mask >>= 1;
			if (bitStream.WriteMask((mask & 0x01) != 0))
			{
				Coherence.Utils.Bounds.Check(data._internalFaction, __internalFaction_Min, __internalFaction_Max, "Game__char_32_State_WorldTree__char_46_GameState_3658229590979758511._internalFaction");
				data._internalFaction = Coherence.Utils.Bounds.Clamp(data._internalFaction, __internalFaction_Min, __internalFaction_Max);
				bitStream.WriteIntegerRange(data._internalFaction, 32, -2147483648);
			}
			mask >>= 1;
		}

		public static (Game__char_32_State_WorldTree__char_46_GameState_3658229590979758511, uint, uint?) Deserialize(InProtocolBitStream bitStream)
		{
			var mask = (uint)0;
			var val = new Game__char_32_State_WorldTree__char_46_GameState_3658229590979758511();
	
			if (bitStream.ReadMask())
			{
				val.playerCount = bitStream.ReadIntegerRange(32, -2147483648);
				mask |= 0b00000000000000000000000000000001;
			}
			if (bitStream.ReadMask())
			{
				val._internalFaction = bitStream.ReadIntegerRange(32, -2147483648);
				mask |= 0b00000000000000000000000000000010;
			}
			return (val, mask, null);
		}
		public static (Game__char_32_State_WorldTree__char_46_GameState_3658229590979758511, uint, uint?) DeserializeArchetypeGame__char_32_State_c4db98e625238cb4abed48cda8fae98e_Game__char_32_State_WorldTree__char_46_GameState_3658229590979758511_LOD0(InProtocolBitStream bitStream)
		{
			var mask = (uint)0;
			var val = new Game__char_32_State_WorldTree__char_46_GameState_3658229590979758511();
			if (bitStream.ReadMask())
			{
				val.playerCount = bitStream.ReadIntegerRange(32, -2147483648);
				mask |= 0b00000000000000000000000000000001;
			}
			if (bitStream.ReadMask())
			{
				val._internalFaction = bitStream.ReadIntegerRange(32, -2147483648);
				mask |= 0b00000000000000000000000000000010;
			}

			return (val, mask, 0);
		}

		/// <summary>
		/// Resets byte array references to the local array instance that is kept in the lastSentData.
		/// If the array content has changed but remains of same length, the new content is copied into the local array instance.
		/// If the array length has changed, the array is cloned and overwrites the local instance.
		/// If the array has not changed, the reference is reset to the local array instance.
		/// Otherwise, changes to other fields on the component might cause the local array instance reference to become permanently lost.
		/// </summary>
		public void ResetByteArrays(ICoherenceComponentData lastSent, uint mask)
		{
			var last = lastSent as Game__char_32_State_WorldTree__char_46_GameState_3658229590979758511?;
	
		}
	}
}